services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - PGUSER=${DATABASE_USER}
    volumes:
      - ./postgres/init-hive-metastore.sql:/docker-entrypoint-initdb.d/init-hive-metastore.sql
      - postgres-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hadoop-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  namenode:
    build:
      context: .
      dockerfile: hadoop.Dockerfile
      args:
        - HADOOP_VERSION=${DOCKER_HADOOP_VERSION}
    container_name: namenode
    hostname: namenode
    environment:
      - HDFS_NAMENODE_USER=hdfs
      - HDFS_DATANODE_USER=hdfs
      - HDFS_SECONDARYNAMENODE_USER=hdfs
      - CLUSTER_NAME=hadoop-cluster
    volumes:
      - ./hadoop/namenode/data:/hadoop/dfs/name
    ports:
      - "9870:9870" # NameNode Web UI
      - "9820:9820" # NameNode RPC
    networks:
      - hadoop-network
    healthcheck:
      test: ["CMD-SHELL", "hdfs dfsadmin -report"]
      interval: 10s
      timeout: 10s
      retries: 5

  datanode:
    build:
      context: .
      dockerfile: hadoop.Dockerfile
      args:
        - HADOOP_VERSION=${DOCKER_HADOOP_VERSION}
    container_name: datanode
    hostname: datanode
    environment:
      - HDFS_NAMENODE_USER=hdfs
      - HDFS_DATANODE_USER=hdfs
      - HDFS_SECONDARYNAMENODE_USER=hdfs
    volumes:
      - ./hadoop/datanode/data:/hadoop/dfs/data
    ports:
      - "9864:9864" # DataNode Web UI
    networks:
      - hadoop-network
    healthcheck:
      test: ["CMD-SHELL", "hdfs dfsadmin -report"]
      interval: 10s
      timeout: 10s
      retries: 5

  resourcemanager:
    build:
      context: .
      dockerfile: hadoop.Dockerfile
      args:
        - HADOOP_VERSION=${DOCKER_HADOOP_VERSION}
    container_name: resourcemanager
    hostname: resourcemanager
    ports:
      - "8088:8088" # ResourceManager Web UI
    depends_on:
      namenode:
        condition: service_healthy
    networks:
      - hadoop-network

  nodemanager:
    build:
      context: .
      dockerfile: hadoop.Dockerfile
      args:
        - HADOOP_VERSION=${DOCKER_HADOOP_VERSION}
    container_name: nodemanager
    ports:
      - "8042:8042" # NodeManager Web UI
    hostname: nodemanager
    depends_on:
      resourcemanager:
        condition: service_started
    networks:
      - hadoop-network

  hive:
    build:
      context: .
      dockerfile: hive.Dockerfile
      args:
        - HADOOP_VERSION=${DOCKER_HADOOP_VERSION}
        - HIVE_VERSION=${DOCKER_HIVE_VERSION}
        - POSTGRESQL_JDBC_VERSION=${DOCKER_POSTGRESQL_JDBC_VERSION}
    hostname: hive
    container_name: hive
    environment:
      - HIVE_CONF_DIR=/home/hive/conf
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      namenode:
        condition: service_healthy
      datanode:
        condition: service_healthy
    ports:
      - "10000:10000" # HiveServer2
      - "10002:10002" # Hive Metastore Thrift
    networks:
      - hadoop-network
    healthcheck:
      test: ["CMD-SHELL", "netstat -pnl | grep 10000"]
      interval: 30s
      timeout: 10s
      retries: 5

  hue:
    image: gethue/hue:${DOCKER_HUE_TAG}
    hostname: hue
    container_name: hue
    environment:
      - HUE_CONF_DIR=/hue/desktop/conf
      - HUE_IGNORE_PASSWORD_SCRIPT_ERRORS=true
    volumes:
      - ./hue:/hue/desktop/conf
    ports:
      - "8888:8888"
    depends_on:
      hive:
        condition: service_healthy
    networks:
      - hadoop-network
    healthcheck:
      test: ["CMD-SHELL", "netstat -pnl | grep 8888"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-volume:

networks:
  hadoop-network:
    driver: bridge